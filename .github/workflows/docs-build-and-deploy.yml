name: Build and Deploy Documentation

on:
  push:
    branches: [ main, master ]
    paths:
      - 'site/**'
      - 'input.css'
      - 'tailwind.config.js'
      - '.github/workflows/docs-build-and-deploy.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'site/**'
      - 'input.css'
      - 'tailwind.config.js'

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install system dependencies
      run: |
        # Install Caddy
        sudo apt update
        sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https
        curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
        curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
        sudo apt update
        sudo apt install caddy

    - name: Install Node.js dependencies
      run: |
        # Install Tailwind CSS
        npm install -g tailwindcss@latest
        
        # Install Pagefind for search functionality
        npm install -g pagefind@latest

    - name: Build Garp CLI
      run: |
        go mod tidy
        go build -o garp-cli ./cmd/garp

    - name: Verify Garp installation
      run: |
        ./garp-cli --version
        ./garp-cli doctor

    - name: Build CSS
      run: |
        ./garp-cli build --css-only
        
    - name: Build search index
      run: |
        ./garp-cli build --search-only

    - name: Validate site structure
      run: |
        # Check that required files exist
        test -f site/style.css || (echo "CSS build failed" && exit 1)
        test -d site/_pagefind || (echo "Search index build failed" && exit 1)
        
        # Validate Caddyfile syntax
        caddy validate --config site/Caddyfile

    - name: Test documentation site
      run: |
        # Start server in background
        cd site && caddy start --config Caddyfile &
        sleep 5
        
        # Test key pages are accessible
        curl -f http://localhost:8080/ || (echo "Homepage not accessible" && exit 1)
        curl -f http://localhost:8080/docs/ || (echo "Docs index not accessible" && exit 1)
        curl -f http://localhost:8080/docs/getting-started || (echo "Getting started page not accessible" && exit 1)
        curl -f http://localhost:8080/docs/cli-reference || (echo "CLI reference not accessible" && exit 1)
        curl -f http://localhost:8080/blog/ || (echo "Blog not accessible" && exit 1)
        
        # Test search endpoints
        curl -f http://localhost:8080/_pagefind/pagefind.js || (echo "Search JS not accessible" && exit 1)
        
        # Stop server
        caddy stop

    - name: Archive build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: garp-docs-build
        path: |
          site/
          !site/Caddyfile
        retention-days: 30

  deploy-netlify:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: garp-docs-build
        path: site/

    - name: Deploy to Netlify
      uses: netlify/actions/cli@master
      with:
        args: deploy --prod --dir=site --message="Automated docs deployment from ${{ github.sha }}"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  deploy-github-pages:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: garp-docs-build
        path: site/

    - name: Setup Pages
      uses: actions/configure-pages@v3

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: site/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

  deploy-cloudflare:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: garp-docs-build
        path: site/

    - name: Deploy to Cloudflare Pages
      uses: cloudflare/pages-action@v1
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        projectName: garp-docs
        directory: site
        gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  link-checker:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: garp-docs-build
        path: site/

    - name: Install link checker
      run: npm install -g broken-link-checker

    - name: Start test server
      run: |
        cd site && python3 -m http.server 8000 &
        sleep 3

    - name: Check internal links
      run: |
        blc http://localhost:8000 --recursive --ordered --exclude-external --filter-level 1 || echo "Some internal links may be broken"

    - name: Check external links (sample)
      run: |
        # Check a few external links to avoid rate limiting
        blc http://localhost:8000 --recursive --ordered --include-external --filter-level 3 --requests 5 || echo "Some external links may be broken"

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: garp-docs-build
        path: site/

    - name: Security scan with Nuclei
      uses: projectdiscovery/nuclei-action@main
      with:
        target: 'site/'
        github-report: true
        github-token: ${{ secrets.GITHUB_TOKEN }}

  performance-audit:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: garp-docs-build
        path: site/

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Lighthouse CI
      run: npm install -g @lhci/cli

    - name: Start test server
      run: |
        cd site && python3 -m http.server 8080 &
        sleep 3

    - name: Run Lighthouse CI
      run: |
        lhci autorun --upload.target=temporary-public-storage --collect.url=http://localhost:8080 --collect.url=http://localhost:8080/docs/ --collect.url=http://localhost:8080/docs/getting-started
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}