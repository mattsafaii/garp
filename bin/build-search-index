#!/usr/bin/env bash

# Build search index script for Garp
# Generates search index using Pagefind for static site search

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print colored output
print_info() {
    echo -e "${BLUE}ℹ${NC} $1"
}

print_success() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

# Check if Pagefind is available
check_pagefind() {
    local pagefind_cmd=""
    
    # Try different possible commands
    if command -v pagefind >/dev/null 2>&1; then
        pagefind_cmd="pagefind"
    elif command -v pagefind_extended >/dev/null 2>&1; then
        pagefind_cmd="pagefind_extended"
    elif command -v npx >/dev/null 2>&1; then
        if npx pagefind --version >/dev/null 2>&1; then
            pagefind_cmd="npx pagefind"
        fi
    elif command -v python3 >/dev/null 2>&1; then
        if python3 -m pagefind --version >/dev/null 2>&1; then
            pagefind_cmd="python3 -m pagefind"
        fi
    fi
    
    if [[ -z "$pagefind_cmd" ]]; then
        print_error "Pagefind not found!"
        print_info "Please install Pagefind:"
        echo ""
        echo "  # Recommended (no installation needed):"
        echo "  npx pagefind --site site"
        echo ""
        echo "  # Or install globally:"
        echo "  npm install -g pagefind"
        echo "  # or"
        echo "  pip install 'pagefind[extended]'"
        echo ""
        echo "  # Visit https://pagefind.app/docs/installation/ for more options"
        echo ""
        exit 1
    fi
    
    echo "$pagefind_cmd"
}

# Validate input and output paths
validate_paths() {
    if [[ ! -d "site" ]]; then
        print_error "site/ directory not found"
        print_info "Please run 'garp init' to set up project structure"
        exit 1
    fi
    
    # Check if we have any HTML content to index
    if ! find site -name "*.html" -type f | head -1 | grep -q .; then
        print_warning "No HTML files found in site/ directory"
        print_info "Make sure you have built your site first with 'garp serve' or add HTML files"
    fi
}

# Build search index
build_search_index() {
    local pagefind_cmd="$1"
    local site_dir="site"
    local output_subdir="_pagefind"
    local verbose_mode=false
    local serve_mode=false
    
    # Check for flags
    while [[ $# -gt 1 ]]; do
        case $2 in
            --verbose|-v)
                verbose_mode=true
                shift
                ;;
            --serve)
                serve_mode=true
                shift
                ;;
            *)
                shift
                ;;
        esac
    done
    
    print_info "Building search index with Pagefind..."
    print_info "Site directory: $site_dir"
    print_info "Output directory: $site_dir/$output_subdir"
    
    # Build the Pagefind command
    local cmd_args=()
    
    # Handle different command types
    if [[ "$pagefind_cmd" == "npx pagefind" ]]; then
        cmd_args=("npx" "pagefind")
    elif [[ "$pagefind_cmd" == "python3 -m pagefind" ]]; then
        cmd_args=("python3" "-m" "pagefind")
    else
        cmd_args=("$pagefind_cmd")
    fi
    
    # Add required arguments
    cmd_args+=("--site" "$site_dir")
    cmd_args+=("--output-subdir" "$output_subdir")
    
    # Add optional arguments
    if [[ "$verbose_mode" == true ]]; then
        cmd_args+=("--verbose")
        print_info "Verbose mode enabled"
    fi
    
    if [[ "$serve_mode" == true ]]; then
        cmd_args+=("--serve")
        print_info "Serve mode enabled - will start development server after indexing"
    fi
    
    # Add glob pattern for HTML files
    cmd_args+=("--glob" "**/*.{html,htm}")
    
    # Configure root selector (index everything by default)
    # Users can add data-pagefind-body to specific elements if needed
    
    # Execute the command
    print_info "Running: ${cmd_args[*]}"
    
    if "${cmd_args[@]}"; then
        print_success "Search index built successfully: $site_dir/$output_subdir"
        
        # Show index statistics if possible
        if [[ -d "$site_dir/$output_subdir" ]]; then
            local index_files
            index_files=$(find "$site_dir/$output_subdir" -name "*.js" -o -name "*.json" | wc -l | tr -d ' ')
            print_info "Generated $index_files index files"
            
            # Show directory size if possible
            if command -v du >/dev/null 2>&1; then
                local size
                size=$(du -h "$site_dir/$output_subdir" 2>/dev/null | tail -1 | cut -f1 || echo "unknown")
                print_info "Index size: $size"
            fi
        fi
    else
        print_error "Failed to build search index"
        exit 1
    fi
}

# Show usage information
show_usage() {
    echo "Usage: $0 [--verbose] [--serve]"
    echo ""
    echo "Build search index for Garp site using Pagefind"
    echo ""
    echo "Options:"
    echo "  --verbose    Show detailed indexing output"
    echo "  --serve      Start development server after indexing"
    echo "  --help       Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0                    # Build search index"
    echo "  $0 --verbose         # Build with detailed output"
    echo "  $0 --serve           # Build and serve"
}

# Parse command line arguments
case "${1:-}" in
    --help|-h)
        show_usage
        exit 0
        ;;
    --verbose|-v|--serve|"")
        # Valid options, will be handled in build_search_index
        ;;
    *)
        print_error "Unknown option: $1"
        show_usage
        exit 1
        ;;
esac

# Main execution
main() {
    print_info "Garp Search Index Build Script"
    
    # Validate environment
    local pagefind_cmd
    pagefind_cmd=$(check_pagefind)
    validate_paths
    
    # Build search index
    build_search_index "$pagefind_cmd" "$@"
}

main "$@"